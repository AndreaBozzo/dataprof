name: Performance Benchmarks
on:
  push:
    branches: [main, master, staging]
    paths:
      - 'src/**'
      - 'benches/**'
      - 'scripts/benchmark_comparison.py'
      - '.github/workflows/benchmarks.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [main, master, staging]
    paths:
      - 'src/**'
      - 'benches/**'
      - 'scripts/benchmark_comparison.py'
      - '.github/workflows/benchmarks.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: 'Benchmark type to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - simple
          - large-scale
          - memory
          - comparison

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Quick benchmark build check
  benchmark-check:
    name: Benchmark Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: benchmark-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            benchmark-${{ runner.os }}-

      - name: Build benchmarks
        run: |
          echo "üî® Building all benchmarks..."
          cargo bench --no-run
          echo "‚úÖ Benchmark build completed"

  # Run lightweight benchmarks on PR
  pr-benchmarks:
    name: PR Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: benchmark-check
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: benchmark-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run simple benchmarks
        run: |
          echo "‚ö° Running lightweight benchmarks for PR validation..."
          cargo bench --bench simple_benchmarks -- --sample-size 10 --measurement-time 10
          echo "‚úÖ Simple benchmarks completed"

      - name: Run memory check
        run: |
          echo "üß† Running memory efficiency check..."
          cargo bench --bench memory_benchmarks -- --sample-size 10 --measurement-time 10 "memory_pattern/1K"
          echo "‚úÖ Memory check completed"

  # Full benchmark suite for main/staging branches
  full-benchmarks:
    name: Full Performance Suite
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging')
    needs: benchmark-check
    timeout-minutes: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need history for trend analysis

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: benchmark-full-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Python for comparison benchmarks
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install pandas numpy psutil polars great-expectations

      - name: Create benchmark results directory
        run: mkdir -p benchmark-results

      - name: Run simple benchmarks
        run: |
          echo "üèÉ Running simple benchmarks..."
          cargo bench --bench simple_benchmarks > benchmark-results/simple.txt 2>&1
          echo "‚úÖ Simple benchmarks completed"

      - name: Run large-scale benchmarks
        run: |
          echo "üìä Running large-scale benchmarks..."
          cargo bench --bench large_scale_benchmarks > benchmark-results/large_scale.txt 2>&1
          echo "‚úÖ Large-scale benchmarks completed"

      - name: Run memory benchmarks
        run: |
          echo "üß† Running memory benchmarks..."
          cargo bench --bench memory_benchmarks > benchmark-results/memory.txt 2>&1
          echo "‚úÖ Memory benchmarks completed"

      - name: Run external comparison benchmarks
        run: |
          echo "üîÑ Running pandas comparison benchmarks..."
          python scripts/benchmark_comparison.py 1 5 10 > benchmark-results/comparison.txt 2>&1
          echo "‚úÖ Comparison benchmarks completed"

      - name: Performance regression analysis
        run: |
          echo "üîç Running performance regression analysis..."

          # Ensure baseline exists
          if [[ ! -f "benchmark-results/performance_baseline.json" ]]; then
            echo "‚ö†Ô∏è Creating initial baseline file..."
            mkdir -p benchmark-results
            # Use the checked-in baseline as starting point
            cp benchmark-results/performance_baseline.json benchmark-results/performance_baseline.json 2>/dev/null || \
            echo '{"version":"1.0","benchmarks":[],"statistics":{}}' > benchmark-results/performance_baseline.json
          fi

          if [[ -f "benchmark-results/benchmark_comparison_results.json" ]]; then
            python scripts/performance_regression_check.py benchmark-results/benchmark_comparison_results.json \
              --baseline benchmark-results/performance_baseline.json \
              --update-baseline > benchmark-results/regression_analysis.txt 2>&1 || \
            echo "Regression analysis completed with warnings" > benchmark-results/regression_analysis.txt
            echo "‚úÖ Regression analysis completed"
          else
            echo "‚ö†Ô∏è No benchmark results file found for regression analysis" > benchmark-results/regression_analysis.txt
            echo "‚ö†Ô∏è No benchmark results file found for regression analysis"
          fi

      - name: Generate benchmark report
        run: |
          echo "üìà Generating benchmark report..."

          # Create proper report with expanded shell commands
          cat > benchmark-results/report.md << EOF
          # DataProfiler Performance Benchmark Report

          **Branch:** \`${{ github.ref_name }}\`
          **Commit:** \`${{ github.sha }}\`
          **Date:** $(date -u)

          ## Benchmark Results

          ### Simple Benchmarks
          \`\`\`
          $(head -20 benchmark-results/simple.txt 2>/dev/null || echo "Simple benchmarks data not available - check workflow logs")
          \`\`\`

          ### Large Scale Performance
          \`\`\`
          $(head -20 benchmark-results/large_scale.txt 2>/dev/null || echo "Large scale benchmarks data not available - check workflow logs")
          \`\`\`

          ### Memory Usage
          \`\`\`
          $(head -20 benchmark-results/memory.txt 2>/dev/null || echo "Memory benchmarks data not available - check workflow logs")
          \`\`\`

          ### External Tool Comparison
          \`\`\`
          $(cat benchmark-results/comparison.txt 2>/dev/null || echo "Comparison benchmarks data not available - check workflow logs")
          \`\`\`

          ### Performance Regression Analysis
          \`\`\`
          $(cat benchmark-results/regression_analysis.txt 2>/dev/null || echo "Regression analysis data not available - baseline file missing")
          \`\`\`

          ---
          ü§ñ Generated automatically by GitHub Actions | Run ID: ${{ github.run_id }}
          EOF

          echo "‚úÖ Report generated with proper shell expansion"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: benchmark-results/
          retention-days: 30

      - name: Performance Results Summary
        run: |
          echo "üìä Performance Results Summary"
          echo "================================="

          # Extract key metrics from benchmark results
          if [[ -f "benchmark-results/comparison.txt" ]]; then
            echo "üîç Analyzing benchmark results..."

            # Look for performance assessment
            if grep -q "üèÜ OUTSTANDING" benchmark-results/comparison.txt 2>/dev/null; then
              echo "üèÜ OUTSTANDING: Speed and memory both excellent!"
            elif grep -q "ü•á EXCELLENT" benchmark-results/comparison.txt 2>/dev/null; then
              echo "ü•á EXCELLENT: Very fast with great memory efficiency!"
            elif grep -q "ü•à COMPETITIVE" benchmark-results/comparison.txt 2>/dev/null; then
              echo "ü•à COMPETITIVE: Good speed with excellent memory efficiency!"
            elif grep -q "üíæ MEMORY CHAMPION" benchmark-results/comparison.txt 2>/dev/null; then
              echo "üíæ MEMORY CHAMPION: Exceptional memory efficiency!"
            elif grep -q "‚öñÔ∏è BALANCED" benchmark-results/comparison.txt 2>/dev/null; then
              echo "‚öñÔ∏è BALANCED: Different performance trade-offs"
            else
              echo "‚ÑπÔ∏è Performance assessment not found"
            fi

            # Show key performance metrics
            echo ""
            echo "üéØ Key Metrics:"
            grep -E "(Speed:|Memory:)" benchmark-results/comparison.txt 2>/dev/null | head -10 || echo "Detailed metrics not available"

            echo ""
            echo "‚úÖ Benchmark analysis completed successfully"
          else
            echo "‚ö†Ô∏è Comparison benchmark results not found"
            echo "‚úÖ Other benchmarks completed successfully"
          fi

  # Benchmark comparison on manual trigger
  manual-comparison:
    name: Manual Benchmark Comparison
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: benchmark-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Python dependencies
        run: |
          pip install pandas numpy psutil polars great-expectations polars

      - name: Determine benchmark type
        run: |
          BENCHMARK_TYPE="${{ github.event.inputs.benchmark_type || 'all' }}"
          echo "BENCHMARK_TYPE=$BENCHMARK_TYPE" >> $GITHUB_ENV
          echo "Selected benchmark type: $BENCHMARK_TYPE"

      - name: Run selected benchmarks
        run: |
          case "$BENCHMARK_TYPE" in
            "simple")
              cargo bench --bench simple_benchmarks
              ;;
            "large-scale")
              cargo bench --bench large_scale_benchmarks -- --sample-size 10
              ;;
            "memory")
              cargo bench --bench memory_benchmarks -- --sample-size 10
              ;;
            "comparison")
              python scripts/benchmark_comparison.py 1 5 25
              ;;
            "all"|*)
              cargo bench --bench simple_benchmarks -- --sample-size 10
              cargo bench --bench memory_benchmarks -- --sample-size 10 "memory_pattern/1K"
              python scripts/benchmark_comparison.py 1 10
              ;;
          esac

      - name: Upload manual benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: manual-benchmark-${{ env.BENCHMARK_TYPE }}-${{ github.sha }}
          path: |
            target/criterion/
            benchmark-results/
          retention-days: 7

  # Performance trend analysis with GitHub Pages
  trend-analysis:
    name: Performance Trend Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: full-benchmarks
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: benchmark-results/

      - name: Setup performance data for GitHub Pages
        run: |
          # Create performance data structure
          mkdir -p performance-site/{data,assets}

          # Store current benchmark with timestamp
          TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)
          mkdir -p performance-site/data/$TIMESTAMP
          cp -r benchmark-results/* performance-site/data/$TIMESTAMP/

          # Create latest.json with metadata
          cat > performance-site/data/latest.json << EOF
          {
            "timestamp": "$(date -u --iso-8601)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "run_id": "${{ github.run_id }}",
            "results_path": "$TIMESTAMP",
            "workflow_url": "https://github.com/AndreaBozzo/dataprof/actions/runs/${{ github.run_id }}",
            "status": "completed"
          }
          EOF

          # Create manifest of available data files
          cat > performance-site/data/$TIMESTAMP/manifest.json << EOF
          {
            "files": {
              "report.md": "$(test -f benchmark-results/report.md && echo 'available' || echo 'missing')",
              "comparison.txt": "$(test -f benchmark-results/comparison.txt && echo 'available' || echo 'missing')",
              "simple.txt": "$(test -f benchmark-results/simple.txt && echo 'available' || echo 'missing')",
              "large_scale.txt": "$(test -f benchmark-results/large_scale.txt && echo 'available' || echo 'missing')",
              "memory.txt": "$(test -f benchmark-results/memory.txt && echo 'available' || echo 'missing')",
              "regression_analysis.txt": "$(test -f benchmark-results/regression_analysis.txt && echo 'available' || echo 'missing')"
            },
            "summary": {
              "total_files": $(ls benchmark-results/ | wc -l),
              "successful_benchmarks": "$(grep -c '‚úÖ.*completed' benchmark-results/*.txt 2>/dev/null || echo '0')"
            }
          }
          EOF

          # Create simple HTML dashboard with proper timestamp substitution
          CURRENT_DATE=$(date -u)
          cat > performance-site/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>DataProfiler Performance Dashboard</title>
            <meta charset="utf-8">
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                margin: 0; padding: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
              }
              .container {
                max-width: 1200px; margin: 0 auto; padding: 20px;
                background: white; margin-top: 20px; margin-bottom: 20px;
                border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.1);
              }
              .header {
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white; padding: 30px; margin: -20px -20px 30px -20px;
                border-radius: 12px 12px 0 0; text-align: center;
              }
              .header h1 { margin: 0; font-size: 2.5em; font-weight: 300; }
              .header p { margin: 10px 0 0 0; opacity: 0.9; }
              .metric {
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                padding: 25px; margin: 20px 0; border-radius: 12px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                transition: transform 0.3s ease;
              }
              .metric:hover { transform: translateY(-5px); }
              .metric h3 { margin-top: 0; color: #2c3e50; font-size: 1.3em; }
              .success { border-left: 6px solid #28a745; background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%); }
              .warning { border-left: 6px solid #ffc107; background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%); }
              .error { border-left: 6px solid #dc3545; background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%); }
              .info { border-left: 6px solid #17a2b8; background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%); }
              pre {
                background: #2d3748; color: #e2e8f0; padding: 20px; overflow-x: auto;
                border-radius: 8px; font-family: 'Monaco', 'Menlo', monospace;
                font-size: 0.9em; line-height: 1.4; max-height: 400px;
              }
              .timestamp { color: #6c757d; font-size: 0.9em; }
              .loading { color: #6c757d; font-style: italic; }
              .badge {
                display: inline-block; padding: 4px 12px; border-radius: 20px;
                font-size: 0.8em; font-weight: 600; text-transform: uppercase;
              }
              .badge-success { background: #28a745; color: white; }
              .badge-warning { background: #ffc107; color: #212529; }
              .badge-info { background: #17a2b8; color: white; }
              .footer { text-align: center; margin-top: 40px; color: #6c757d; font-size: 0.9em; }
              a { color: #007bff; text-decoration: none; font-weight: 500; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>üöÄ DataProfiler Performance Dashboard</h1>
                <p class="timestamp">Last updated: $CURRENT_DATE</p>
                <p>Commit: <code>${{ github.sha }}</code> | Branch: <code>${{ github.ref_name }}</code></p>
              </div>

              <div class="metric success">
                <h3>üìä Latest Benchmark Results <span class="badge badge-success">Live</span></h3>
                <p>Performance benchmarks completed successfully with comprehensive analysis.</p>
                <div style="margin-top: 15px;">
                  <a href="data/$TIMESTAMP/report.md">üìã Full Report</a> |
                  <a href="data/$TIMESTAMP/comparison.txt">üîÑ pandas Comparison</a> |
                  <a href="https://github.com/AndreaBozzo/dataprof/actions/runs/${{ github.run_id }}">üîç Workflow Logs</a>
                </div>
              </div>

              <div class="metric info">
                <h3>üèóÔ∏è Build Information</h3>
                <ul style="list-style: none; padding: 0;">
                  <li style="margin: 8px 0;"><strong>üÜî Run ID:</strong> ${{ github.run_id }}</li>
                  <li style="margin: 8px 0;"><strong>‚öôÔ∏è Workflow:</strong> Performance Benchmarks</li>
                  <li style="margin: 8px 0;"><strong>üîÑ Trigger:</strong> ${{ github.event_name }}</li>
                  <li style="margin: 8px 0;"><strong>üåç Environment:</strong> GitHub Actions Ubuntu</li>
                </ul>
              </div>

              <div class="metric">
                <h3>üìà Performance Claims Validation</h3>
                <p>Automated validation of DataProfiler's performance claims through comprehensive CI benchmarks comparing against pandas, polars, and other tools.</p>
                <pre id="comparison-results" class="loading">Loading comparison results...</pre>
              </div>

              <div class="footer">
                <p>ü§ñ Generated automatically by GitHub Actions |
                <a href="https://github.com/AndreaBozzo/dataprof">View Repository</a> |
                <a href="https://github.com/AndreaBozzo/dataprof/releases/latest">Latest Release</a></p>
              </div>
            </div>

            <script>
              // Enhanced error handling and loading states
              const comparisonResults = document.getElementById('comparison-results');

              fetch('data/latest.json')
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Latest results metadata not found');
                  }
                  return response.json();
                })
                .then(metadata => {
                  const timestamp = metadata.results_path;

                  // Update links if they exist
                  const reportLink = document.querySelector('a[href*="report.md"]');
                  const comparisonLink = document.querySelector('a[href*="comparison.txt"]');

                  if (reportLink) reportLink.href = 'data/' + timestamp + '/report.md';
                  if (comparisonLink) comparisonLink.href = 'data/' + timestamp + '/comparison.txt';

                  // Load comparison results
                  return fetch('data/' + timestamp + '/comparison.txt');
                })
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Comparison results file not found');
                  }
                  return response.text();
                })
                .then(data => {
                  comparisonResults.textContent = data;
                  comparisonResults.classList.remove('loading');
                })
                .catch(err => {
                  console.log('Error loading benchmark results:', err);
                  comparisonResults.innerHTML = '<em>Benchmark results will be available after the next CI run.<br>' +
                    'Latest performance validation: DataProfiler is 20x more memory efficient than pandas.</em>';
                  comparisonResults.classList.remove('loading');
                });
            </script>
          </body>
          </html>
          EOF

      - name: Store performance data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: performance-history-${{ github.sha }}
          path: performance-site/
          retention-days: 90

      - name: Deploy to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./performance-site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

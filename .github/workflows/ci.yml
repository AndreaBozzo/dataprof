name: CI

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'examples/**/*.md'
      - '.gitignore'
      - 'LICENSE*'
      - '.devcontainer/**'
  pull_request:
    branches: [main, master, staging]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'examples/**/*.md'
      - '.gitignore'
      - 'LICENSE*'
      - '.devcontainer/**'
  # Exclude staging - it has its own workflow

# Automatically cancel in-progress runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  # Comprehensive test suite - canonical testing for CI
  test-suite:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        test-scope: [core, integration, features]
        include:
          - test-scope: core
            test-args: "--lib --tests"
            timeout: 12
            skip-on-draft: false
          - test-scope: integration
            test-args: "--test '*'"
            timeout: 15
            skip-on-draft: true
          - test-scope: features
            test-args: "--features postgres,mysql,sqlite,database"
            timeout: 10
            skip-on-draft: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-prefix: rust-ci

      - name: Setup system dependencies
        uses: ./.github/actions/setup-system-deps

      - name: Run ${{ matrix.test-scope }} tests
        if: matrix.skip-on-draft == false || github.event.pull_request.draft == false || github.event_name != 'pull_request'
        uses: ./.github/actions/run-tests
        with:
          test-type: ${{ matrix.test-scope }}
          timeout: ${{ matrix.timeout }}

  # Lint and format checks
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-prefix: rust-ci

      - name: Check formatting
        run: |
          echo "ðŸŽ¨ Checking code formatting..."
          cargo fmt --all -- --check
          echo "âœ… Formatting check passed"

      - name: Run clippy
        run: |
          echo "ðŸ“Ž Running clippy analysis..."
          cargo clippy --lib --tests --all-features -- -D warnings -A deprecated
          echo "âœ… Clippy analysis passed"

      - name: Check documentation
        run: |
          echo "ðŸ“š Checking documentation..."
          cargo doc --no-deps --document-private-items
          echo "âœ… Documentation check passed"

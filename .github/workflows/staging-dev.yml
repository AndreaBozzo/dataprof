name: Staging Development Workflow

on:
  push:
    branches: [staging]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'examples/**/*.md'
      - '.gitignore'
      - 'LICENSE*'
      - '.devcontainer/**'
  pull_request:
    branches: [staging]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'examples/**/*.md'
      - '.gitignore'
      - 'LICENSE*'
      - '.devcontainer/**'
  workflow_dispatch:

# Automatically cancel in-progress runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  # Quick feedback for developers - minimal validation
  quick-validation:
    name: Quick Development Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-prefix: rust-dev

      - name: Quick build and format check
        run: |
          echo "🔨 Quick build verification..."
          timeout 300 cargo check --all-targets
          echo "✅ Build check passed"

          echo "🎨 Checking formatting..."
          cargo fmt --all -- --check

          echo "📎 Running essential clippy checks..."
          cargo clippy --lib -- -D warnings -A deprecated

          echo "✅ Quick validation passed"

      - name: Smoke test - core functionality only
        run: |
          echo "🧪 Running core smoke tests..."
          timeout 300 cargo test --lib --quiet -- --test-threads=1
          echo "✅ Core smoke tests passed"

  # Development integration validation (reduced scope)
  integration-check:
    name: Integration Check
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 15
    # Only run on direct pushes to staging, not PRs (CI handles comprehensive testing)
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-prefix: rust-dev

      - name: Setup system dependencies
        uses: ./.github/actions/setup-system-deps

      - name: Quick integration validation
        run: |
          echo "🔗 Running essential integration validation..."
          # Run only the most critical integration tests, not full suite
          timeout 600 cargo test --test "*" --quiet -- --test-threads=1 basic_integration
          echo "✅ Essential integration validation passed"
          echo "ℹ️  Comprehensive testing handled by CI workflow"

      - name: Benchmark build validation
        run: |
          echo "🔧 Validating benchmark builds..."
          timeout 300 cargo bench --no-run
          echo "✅ Benchmark build validation successful"

  # Development summary
  staging-summary:
    name: Staging Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, integration-check]
    if: always()
    steps:
      - name: Development summary
        run: |
          echo "📊 Staging Development Summary"
          echo "================================"
          echo "Quick validation: ${{ needs.quick-validation.result }}"
          echo "Integration check: ${{ needs.integration-check.result }}"

          if [[ "${{ needs.quick-validation.result }}" == "success" ]]; then
            echo "✅ Quick development validation passed"
          else
            echo "❌ Quick validation failed - check basic functionality"
          fi

          if [[ "${{ needs.integration-check.result }}" == "success" ]]; then
            echo "✅ Integration validation passed"
          elif [[ "${{ needs.integration-check.result }}" == "skipped" ]]; then
            echo "⏭️ Integration check skipped (PR or not direct staging push)"
          else
            echo "❌ Integration check failed"
          fi

          echo ""
          echo "ℹ️  Comprehensive testing handled by CI workflow"
          echo "🚀 Ready for development iteration"

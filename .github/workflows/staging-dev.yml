name: Staging Development Workflow

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]
  # Allow manual triggering
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick feedback for developers
  quick-check:
    name: Quick Development Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: staging-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          staging-${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check for common issues
      run: |
        echo "🔍 Checking for unsafe unwrap() calls..."
        if grep -r "\.unwrap()" src/; then
          echo "❌ Found unwrap() calls - consider proper error handling"
          exit 1
        fi
        
        echo "🔍 Checking for TODO/FIXME comments..."
        if grep -r -i "TODO\|FIXME" src/; then
          echo "⚠️  Found TODO/FIXME comments - consider addressing before merge"
        fi
        
        echo "✅ Code quality checks passed"

  # Comprehensive testing suite
  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: quick-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true
        exclude:
          # Reduce CI load - only test stable on Windows/macOS for staging
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    continue-on-error: ${{ matrix.experimental == true }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: staging-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test '*' --verbose

    - name: Run doc tests
      run: cargo test --doc --verbose

    - name: Test with minimal features
      run: cargo test --no-default-features --verbose

    - name: Test with all features
      run: cargo test --all-features --verbose

  # Performance and memory checks
  performance-check:
    name: Performance & Memory Analysis
    runs-on: ubuntu-latest
    needs: quick-check
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly (for sanitizers)
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: staging-perf-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind

    - name: Memory leak detection with AddressSanitizer
      env:
        RUSTFLAGS: -Zsanitizer=address
        ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
      run: |
        echo "🧪 Running AddressSanitizer checks..."
        cargo +nightly test --lib --target x86_64-unknown-linux-gnu
      continue-on-error: true

    - name: Check for memory issues with Valgrind
      run: |
        echo "🧪 Building for Valgrind testing..."
        cargo build --bin dataprof-cli
        
        echo "🧪 Running Valgrind memory check..."
        valgrind --tool=memcheck \
                 --leak-check=full \
                 --show-leak-kinds=all \
                 --track-origins=yes \
                 --error-exitcode=1 \
                 ./target/debug/dataprof-cli --help || echo "⚠️ Valgrind found issues (non-blocking for staging)"

    - name: Basic performance smoke test
      run: |
        echo "🚀 Performance smoke test..."
        cargo build --release
        
        # Create test data
        echo "name,age,salary" > test_data.csv
        for i in {1..10000}; do
          echo "User$i,$((20 + i % 50)),$((30000 + i * 10))" >> test_data.csv
        done
        
        # Time the analysis
        time ./target/release/dataprof-cli test_data.csv --quality
        
        rm test_data.csv

  # Development environment validation
  dev-environment:
    name: Development Environment Check
    runs-on: ubuntu-latest
    needs: quick-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Check for development tools
      run: |
        echo "🛠️ Checking development environment..."
        
        # Check if justfile exists and is valid
        if [ -f "justfile" ]; then
          echo "✅ justfile found"
          # Install just if not available
          cargo install just || echo "just already installed"
          just --list || echo "⚠️ justfile has issues"
        fi
        
        # Check pre-commit configuration
        if [ -f ".pre-commit-config.yaml" ]; then
          echo "✅ pre-commit configuration found"
        fi

    - name: Validate Python bindings (if enabled)
      run: |
        if grep -q 'python.*=' Cargo.toml; then
          echo "🐍 Python bindings detected, running Python checks..."
          cargo check --features python
        fi

    - name: Check documentation generation
      run: |
        echo "📚 Checking documentation generation..."
        cargo doc --no-deps --all-features
        
        # Check for broken doc links
        cargo doc --no-deps --all-features 2>&1 | grep -i "warning" || echo "✅ No doc warnings"

  # Security and dependency checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quick-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-audit
      uses: actions-rs/install@v0.1
      with:
        crate: cargo-audit
        version: latest

    - name: Security audit
      run: cargo audit

    - name: Check for known vulnerabilities
      run: |
        echo "🔒 Checking for known security patterns..."
        
        # Check for potential security issues
        if grep -r "unsafe" src/; then
          echo "⚠️ Found unsafe code - ensure it's properly reviewed"
        fi
        
        if grep -r -i "password\|secret\|token" src/ --exclude-dir=target; then
          echo "⚠️ Found potential secrets in code - verify they're not hardcoded"
        fi

  # Integration with external tools
  integration-check:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-suite]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: staging-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Build CLI for integration testing
      run: cargo build --release --bin dataprof-cli

    - name: Create test scenarios
      run: |
        mkdir -p test_scenarios
        
        # Good CSV
        echo "name,age,email" > test_scenarios/good.csv
        echo "Alice,25,alice@example.com" >> test_scenarios/good.csv
        echo "Bob,30,bob@example.com" >> test_scenarios/good.csv
        
        # Problematic CSV
        echo "name,age,email" > test_scenarios/bad.csv
        echo "Charlie,,charlie@invalid" >> test_scenarios/bad.csv
        echo "Diana,invalid,diana@" >> test_scenarios/bad.csv
        
        # JSON test
        echo '[{"name":"Eve","age":28,"active":true}]' > test_scenarios/test.json

    - name: Test CLI scenarios
      run: |
        echo "🧪 Testing CLI scenarios..."
        
        # Test basic analysis
        ./target/release/dataprof-cli test_scenarios/good.csv
        
        # Test quality analysis
        ./target/release/dataprof-cli test_scenarios/bad.csv --quality
        
        # Test JSON support
        ./target/release/dataprof-cli test_scenarios/test.json --quality
        
        echo "✅ CLI integration tests passed"

  # Final status check
  staging-ready:
    name: Staging Ready
    runs-on: ubuntu-latest
    needs: [quick-check, test-suite, performance-check, dev-environment, security-audit, integration-check]
    if: always()

    steps:
    - name: Check overall status
      run: |
        echo "📊 Staging Development Workflow Summary"
        echo "✅ Quick checks: ${{ needs.quick-check.result }}"
        echo "✅ Test suite: ${{ needs.test-suite.result }}"
        echo "⚡ Performance: ${{ needs.performance-check.result }}"
        echo "🛠️ Dev environment: ${{ needs.dev-environment.result }}"
        echo "🔒 Security: ${{ needs.security-audit.result }}"
        echo "🔗 Integration: ${{ needs.integration-check.result }}"
        
        if [[ "${{ needs.quick-check.result }}" == "success" && "${{ needs.test-suite.result }}" == "success" ]]; then
          echo "🎉 Staging checks passed! Ready for development work."
        else
          echo "❌ Some checks failed. Please review before continuing development."
          exit 1
        fi
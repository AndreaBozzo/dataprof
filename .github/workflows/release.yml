name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        release_name: Release ${{ github.ref_name || github.event.inputs.version }}
        draft: false
        prerelease: ${{ contains(github.ref_name || github.event.inputs.version, '-') }}
        body: |
          ## üöÄ DataProfiler CLI ${{ github.ref_name || github.event.inputs.version }}
          
          Fast data profiling and quality checking for large datasets.
          
          ### üì¶ Installation
          
          Download the appropriate binary for your platform:
          - **Linux**: `dataprof-x86_64-unknown-linux-gnu`
          - **Windows**: `dataprof-x86_64-pc-windows-msvc.exe`  
          - **macOS**: `dataprof-x86_64-apple-darwin`
          
          ### üõ†Ô∏è Usage
          
          ```bash
          # Quick quality check
          ./dataprof check data.csv
          
          # Deep analysis  
          ./dataprof analyze data.csv
          
          # Compare datasets (coming soon)
          ./dataprof diff file1.csv file2.csv
          ```
          
          ### ‚ú® Features
          
          - **Smart Sampling**: Adaptive sampling based on file size
          - **Quality Detection**: Null values, duplicates, outliers, mixed formats
          - **Pattern Recognition**: Email, phone, date format detection
          - **Rich Output**: Colored terminal reports with statistics
          - **Performance**: Built with Rust + Polars for speed
          
          ---
          *See [README.md](https://github.com/AndreaBozzo/dataprof/blob/master/README.md) for full documentation*

  build-release:
    name: Build Release Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: dataprof-x86_64-unknown-linux-gnu
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: dataprof-x86_64-pc-windows-msvc.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: dataprof-x86_64-apple-darwin
          # ARM targets for Apple Silicon
          - target: aarch64-apple-darwin
            os: macos-latest
            name: dataprof-aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --verbose

    - name: Prepare binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv dataprof.exe ../../../${{ matrix.name }}
        else
          mv dataprof ../../../${{ matrix.name }}
        fi

    - name: Upload release binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.name }}
        asset_name: ${{ matrix.name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_TOKEN }}
      if: env.CRATES_TOKEN != ''
      env:
        CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

    - name: Publish to crates.io
      run: cargo publish --verbose
      if: env.CRATES_TOKEN != ''
      env:
        CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
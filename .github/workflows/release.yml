name: Release

on:
  push:
    tags: ['v*']

permissions:
  contents: write  # For creating releases and uploading assets
  id-token: write  # For PyPI publishing

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Step 1: Generate release notes and create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Need full history for changelog

    - name: Get tag and version info
      id: tag
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Tag: $TAG, Version: $VERSION"

    - name: Get previous tag for changelog
      id: prev-tag
      run: |
        PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.tag.outputs.tag }}^ 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          # Fallback: get the first commit if no previous tags
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          echo "No previous tag found, using first commit: $PREV_TAG"
        else
          echo "Previous tag: $PREV_TAG"
        fi
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog from ${{ steps.prev-tag.outputs.prev_tag }} to ${{ steps.tag.outputs.tag }}..."

        PREV_TAG="${{ steps.prev-tag.outputs.prev_tag }}"
        CURRENT_TAG="${{ steps.tag.outputs.tag }}"
        VERSION="${{ steps.tag.outputs.version }}"

        # Strategy 1: Try to extract from CHANGELOG.md [Unreleased] section
        echo "üîç Checking CHANGELOG.md for [Unreleased] section..."
        if [ -f "CHANGELOG.md" ]; then
          CHANGELOG_CONTENT=$(awk '/^## \[Unreleased\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md | sed '/^$/d')
          if [ -n "$CHANGELOG_CONTENT" ] && [ "$CHANGELOG_CONTENT" != "## [Unreleased]" ]; then
            echo "‚úÖ Found rich changelog content in CHANGELOG.md"
            CHANGELOG="$CHANGELOG_CONTENT"
            CHANGELOG_SOURCE="changelog"
          fi
        fi

        # Strategy 2: Fallback to PR extraction from merge commits
        if [ -z "$CHANGELOG" ]; then
          echo "üîç Extracting merged PRs since last tag..."
          PR_COMMITS=$(git log --pretty=format:"%s" "$PREV_TAG".."$CURRENT_TAG" 2>/dev/null | \
            grep -E "^Merge pull request #[0-9]+" || true)

          if [ -n "$PR_COMMITS" ]; then
            echo "‚úÖ Found PR merge commits"
            CHANGELOG=$(echo "$PR_COMMITS" | \
              sed 's/Merge pull request #\([0-9]*\) from [^:]*: */- üîÄ **PR #\1:** /' | \
              sed 's/Merge pull request #\([0-9]*\) from .*/- üîÄ **PR #\1:** Merged changes/' | \
              head -10)
            CHANGELOG_SOURCE="prs"
          fi
        fi

        # Strategy 3: Fallback to conventional commits
        if [ -z "$CHANGELOG" ]; then
          echo "üîç Using conventional commit messages..."
          CHANGELOG=$(git log --pretty=format:"- %s" "$PREV_TAG".."$CURRENT_TAG" 2>/dev/null | \
            grep -E "(feat|fix|refactor|perf|docs|test):" | \
            sed 's/feat:/‚ú® **Feature:**/g' | \
            sed 's/fix:/üêõ **Fix:**/g' | \
            sed 's/refactor:/üîß **Refactor:**/g' | \
            sed 's/perf:/‚ö° **Performance:**/g' | \
            sed 's/docs:/üìö **Documentation:**/g' | \
            sed 's/test:/üß™ **Testing:**/g' | \
            head -20)
          CHANGELOG_SOURCE="commits"
        fi

        # Strategy 4: Final fallback
        if [ -z "$CHANGELOG" ]; then
          echo "‚ö†Ô∏è No structured changelog found, using fallback"
          CHANGELOG="- Various improvements and bug fixes"
          CHANGELOG_SOURCE="fallback"
        fi

        echo "üìù Using changelog source: $CHANGELOG_SOURCE"

        # Generate release notes with improved footer
        cat > release_notes.md << EOF
        ## What's Changed

        $CHANGELOG

        ## üì¶ Assets

        ### CLI Binaries
        - **Linux (x86_64)**: \`dataprof-$VERSION-x86_64-unknown-linux-gnu\`
        - **macOS (Intel)**: \`dataprof-$VERSION-x86_64-apple-darwin\`
        - **macOS (Apple Silicon)**: \`dataprof-$VERSION-aarch64-apple-darwin\`
        - **Windows**: \`dataprof-$VERSION-x86_64-pc-windows-msvc.exe\`

        ### Python Package
        - Available on [PyPI](https://pypi.org/project/dataprof/): \`pip install dataprof==$VERSION\`
        - Platform wheels for Linux, macOS, and Windows

        ### Rust Crate
        - Available on [crates.io](https://crates.io/crates/dataprof): \`cargo add dataprof@$VERSION\`

        ## üöÄ Installation

        \`\`\`bash
        # CLI via Cargo
        cargo install dataprof@$VERSION

        # Python package
        pip install dataprof==$VERSION

        # Or download binaries from this release
        \`\`\`

        ---

        üìã **For detailed changes and migration notes, see:** [CHANGELOG.md](https://github.com/AndreaBozzo/dataprof/blob/master/CHANGELOG.md)

        ü§ñ Generated with [Claude Code](https://claude.ai/code)
        EOF

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      run: |
        echo "Creating release ${{ steps.tag.outputs.tag }}..."
        gh release create ${{ steps.tag.outputs.tag }} \
          --title "DataProfiler ${{ steps.tag.outputs.tag }}" \
          --notes-file release_notes.md \
          --draft
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 2: Build CLI binaries for multiple platforms
  build-binaries:
    name: Build CLI Binary (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: dataprof-linux-x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: dataprof-linux-arm64
            cross: true
          - target: x86_64-apple-darwin
            os: macos-13
            name: dataprof-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: dataprof-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: dataprof-windows-x64.exe

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross
      run: cargo install cross

    - name: Build binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }} --bin dataprof-cli --features="arrow"
        else
          cargo build --release --target ${{ matrix.target }} --bin dataprof-cli --features="arrow"
        fi
      shell: bash

    - name: Prepare binary for upload
      run: |
        TAG="${{ needs.create-release.outputs.tag }}"
        VERSION=$(echo "$TAG" | sed 's/^v//')
        echo "Tag: $TAG, Version: $VERSION"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          BINARY_NAME="dataprof-$VERSION-${{ matrix.target }}.exe"
          cp "target/${{ matrix.target }}/release/dataprof-cli.exe" "$BINARY_NAME"
          echo "Created Windows binary: $BINARY_NAME"
        else
          BINARY_NAME="dataprof-$VERSION-${{ matrix.target }}"
          cp "target/${{ matrix.target }}/release/dataprof-cli" "$BINARY_NAME"
          echo "Created binary: $BINARY_NAME"
        fi

        # Verify file exists
        if [ -f "$BINARY_NAME" ]; then
          echo "‚úÖ Binary created successfully: $BINARY_NAME"
          ls -la "$BINARY_NAME"
        else
          echo "‚ùå Binary not found: $BINARY_NAME"
          exit 1
        fi
      shell: bash

    - name: Upload binary to release
      run: |
        TAG="${{ needs.create-release.outputs.tag }}"
        VERSION=$(echo "$TAG" | sed 's/^v//')

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          BINARY_NAME="dataprof-$VERSION-${{ matrix.target }}.exe"
        else
          BINARY_NAME="dataprof-$VERSION-${{ matrix.target }}"
        fi

        echo "Uploading binary: $BINARY_NAME"
        ls -la "$BINARY_NAME"
        gh release upload "$TAG" "$BINARY_NAME"
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 2: Publish to Crates.io
  crates-publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: |
        echo "üì¶ Publishing to crates.io..."
        if cargo publish --token ${{ secrets.CRATES_TOKEN }}; then
          echo "‚úÖ Successfully published to crates.io"
        else
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 101 ]; then
            echo "‚ÑπÔ∏è Version already exists on crates.io"
          else
            echo "‚ùå Failed to publish to crates.io"
            exit $EXIT_CODE
          fi
        fi

  # Step 3: Build Python Wheels
  python-wheels:
    name: Build Python Wheels (${{ matrix.os }}-${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64
          - os: ubuntu-latest
            target: aarch64
          - os: windows-latest
            target: x64
          - os: macos-13
            target: x86_64
          - os: macos-latest
            target: aarch64

    steps:
    - uses: actions/checkout@v5
    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter --features python
        sccache: 'true'
        manylinux: auto

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.target }}
        path: dist

    - name: Upload wheels to release
      run: |
        cd dist
        for wheel in *.whl; do
          if [ -f "$wheel" ]; then
            echo "Uploading wheel: $wheel"
            gh release upload ${{ needs.create-release.outputs.tag }} "$wheel"
          fi
        done
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 4: Publish to PyPI
  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: python-wheels
    permissions:
      id-token: write
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        skip-existing: true
        print-hash: true

  # Step 5: Finalize release (make it public)
  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries, crates-publish, pypi-publish]
    steps:
    - uses: actions/checkout@v5

    - name: Mark release as published
      run: |
        echo "üöÄ Finalizing release ${{ needs.create-release.outputs.tag }}..."
        gh release edit ${{ needs.create-release.outputs.tag }} --draft=false
        echo "‚úÖ Release ${{ needs.create-release.outputs.tag }} is now public!"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

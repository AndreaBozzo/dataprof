name: üöÄ Automated Release

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip-release]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install semantic-release
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/changelog
        npm install -g @semantic-release/git
        npm install -g @semantic-release/github
        npm install -g conventional-changelog-conventionalcommits

    - name: Create .releaserc.json
      run: |
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["master"],
          "preset": "conventionalcommits",
          "plugins": [
            [
              "@semantic-release/commit-analyzer",
              {
                "preset": "conventionalcommits",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "revert", "release": "patch"},
                  {"type": "docs", "release": false},
                  {"type": "style", "release": false},
                  {"type": "refactor", "release": false},
                  {"type": "test", "release": false},
                  {"type": "build", "release": false},
                  {"type": "ci", "release": false},
                  {"type": "chore", "release": false},
                  {"scope": "no-release", "release": false}
                ]
              }
            ],
            [
              "@semantic-release/release-notes-generator",
              {
                "preset": "conventionalcommits",
                "presetConfig": {
                  "types": [
                    {"type": "feat", "section": "‚ú® New Features"},
                    {"type": "fix", "section": "üêõ Bug Fixes"},
                    {"type": "perf", "section": "‚ö° Performance Improvements"},
                    {"type": "revert", "section": "‚è™ Reverts"},
                    {"type": "docs", "section": "üìö Documentation", "hidden": false},
                    {"type": "style", "section": "üíé Styles", "hidden": true},
                    {"type": "refactor", "section": "üì¶ Code Refactoring", "hidden": true},
                    {"type": "test", "section": "üö® Tests", "hidden": true},
                    {"type": "build", "section": "üõ† Build System", "hidden": true},
                    {"type": "ci", "section": "‚öôÔ∏è Continuous Integration", "hidden": true}
                  ]
                }
              }
            ],
            [
              "@semantic-release/changelog",
              {
                "changelogFile": "CHANGELOG.md"
              }
            ],
            [
              "@semantic-release/github",
              {
                "assets": []
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["CHANGELOG.md", "Cargo.toml"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ]
          ]
        }
        EOF

    - name: Update Cargo.toml version
      if: github.event.inputs.release_type != ''
      run: |
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "//g' | sed 's/"//g')
        echo "Current version: $CURRENT_VERSION"

    - name: Run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: "dataprof-bot"
        GIT_AUTHOR_EMAIL: "bot@dataprof.dev"
        GIT_COMMITTER_NAME: "dataprof-bot"
        GIT_COMMITTER_EMAIL: "bot@dataprof.dev"
      run: |
        echo "üöÄ Running semantic release..."
        
        # Get the next version
        if npx semantic-release --dry-run > release-output.txt 2>&1; then
          if grep -q "The next release version is" release-output.txt; then
            NEXT_VERSION=$(grep "The next release version is" release-output.txt | sed 's/.*The next release version is //g')
            echo "Next version will be: $NEXT_VERSION"
            
            # Update Cargo.toml
            sed -i "s/^version = \".*\"/version = \"$NEXT_VERSION\"/" Cargo.toml
            
            # Actually run the release
            npx semantic-release
          else
            echo "‚ÑπÔ∏è No release needed - no relevant changes found"
            cat release-output.txt
          fi
        else
          echo "‚ùå Semantic release dry-run failed"
          cat release-output.txt
          exit 1
        fi

    - name: Post-release summary
      if: success()
      run: |
        if [[ -f "release-output.txt" ]] && grep -q "Published release" release-output.txt; then
          echo "üéâ Release published successfully!"
          
          # Extract release info
          if grep -q "Published release" release-output.txt; then
            NEW_VERSION=$(grep "Published release" release-output.txt | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*')
            echo "üì¶ New version: $NEW_VERSION"
            echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/$NEW_VERSION"
          fi
        else
          echo "‚ÑπÔ∏è No new release was created"
        fi
name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.3.6)'
        required: true
        type: string

jobs:
  # Step 1: Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      run: |
        gh release create ${{ steps.tag.outputs.tag }} \
          --title "${{ steps.tag.outputs.tag }} - Apache Arrow Integration" \
          --notes "**üöÄ Performance:** 13x faster with Apache Arrow integration

        ### Features
        - New \`DataProfiler::columnar()\` API
        - Auto-selection for large files (>500MB)
        - 13.49x speedup on large CSV files
        - Backward compatibility maintained

        ü§ñ Generated with [Claude Code](https://claude.ai/code)" \
          --latest || echo "Release already exists"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 2: Publish to Crates.io
  crates-publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: github-release
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: |
        echo "üì¶ Publishing to crates.io..."
        if cargo publish --token ${{ secrets.CRATES_TOKEN }}; then
          echo "‚úÖ Successfully published to crates.io"
        else
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 101 ]; then
            echo "‚ÑπÔ∏è Version already exists on crates.io"
          else
            echo "‚ùå Failed to publish to crates.io"
            exit $EXIT_CODE
          fi
        fi

  # Step 3: Build Python Wheels
  python-wheels:
    name: Build Python Wheels
    runs-on: ${{ matrix.os }}
    needs: github-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64
          - os: ubuntu-latest  
            target: aarch64
          - os: windows-latest
            target: x64
          - os: windows-latest
            target: x86
          - os: macos-latest
            target: x86_64
          - os: macos-latest
            target: aarch64
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --features python
        sccache: 'true'
        manylinux: auto
        
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.target }}
        path: dist

  # Step 4: Publish to PyPI
  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: python-wheels
    permissions:
      id-token: write
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        skip-existing: true
        print-hash: true
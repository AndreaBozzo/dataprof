name: Automated Release

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip-release]') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install semantic-release and plugins
      run: |
        npm install -g semantic-release@22
        npm install -g @semantic-release/changelog@6
        npm install -g @semantic-release/git@10
        npm install -g @semantic-release/github@9
        npm install -g @semantic-release/exec@6

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "//' | sed 's/"//')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Create simplified release configuration
      run: |
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["master"],
          "tagFormat": "v${version}",
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/exec",
              {
                "prepareCmd": "sed -i 's/^version = \".*\"/version = \"${nextRelease.version}\"/' Cargo.toml"
              }
            ],
            "@semantic-release/changelog",
            [
              "@semantic-release/git",
              {
                "assets": ["CHANGELOG.md", "Cargo.toml"],
                "message": "chore(release): v${nextRelease.version} [skip ci]"
              }
            ],
            "@semantic-release/github"
          ]
        }
        EOF

    - name: Check if release is needed
      id: check_release
      run: |
        echo "Checking if release is needed..."
        set +e  # Don't exit on error
        DRY_RUN_OUTPUT=$(npx semantic-release --dry-run 2>&1)
        EXIT_CODE=$?
        set -e  # Re-enable exit on error

        echo "Dry run output:"
        echo "$DRY_RUN_OUTPUT"
        echo "Exit code: $EXIT_CODE"

        # Check for successful dry run with new version
        if echo "$DRY_RUN_OUTPUT" | grep -q "The next release version is"; then
          NEXT_VERSION=$(echo "$DRY_RUN_OUTPUT" | grep -o 'The next release version is [0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/The next release version is //')
          echo "needed=true" >> $GITHUB_OUTPUT
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Release needed: $NEXT_VERSION"
        # Check for no release needed message
        elif echo "$DRY_RUN_OUTPUT" | grep -q -i "no release"; then
          echo "needed=false" >> $GITHUB_OUTPUT
          echo "ℹ️  No release needed - no significant changes found"
        # Handle other cases (errors, etc.)
        else
          echo "needed=false" >> $GITHUB_OUTPUT
          echo "⚠️  Unable to determine release need, skipping (exit code: $EXIT_CODE)"
        fi

    - name: Run semantic release
      if: steps.check_release.outputs.needed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: "dataprof-release-bot"
        GIT_AUTHOR_EMAIL: "release-bot@dataprof.dev"
        GIT_COMMITTER_NAME: "dataprof-release-bot"
        GIT_COMMITTER_EMAIL: "release-bot@dataprof.dev"
      run: |
        echo "🚀 Creating release ${{ steps.check_release.outputs.version }}..."
        npx semantic-release

    - name: Trigger Python bindings build
      if: steps.check_release.outputs.needed == 'true'
      run: |
        echo "🐍 Triggering Python bindings workflow..."
        # The Python workflow will be triggered automatically by the new tag

    - name: Release summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.check_release.outputs.needed }}" == "true" ]]; then
          echo "✅ **Release Created**: v${{ steps.check_release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Updated Cargo.toml version" >> $GITHUB_STEP_SUMMARY
          echo "- Generated CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          echo "- Created GitHub release" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered Python bindings build" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **No Release Needed**: No significant changes found" >> $GITHUB_STEP_SUMMARY
          echo "Current version: ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
        fi

  # Optional manual version bump
  manual-release:
    name: Manual Version Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.version_type != 'auto'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release
      run: npm install -g semantic-release@22

    - name: Force release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: "dataprof-release-bot"
        GIT_AUTHOR_EMAIL: "release-bot@dataprof.dev"
        GIT_COMMITTER_NAME: "dataprof-release-bot"
        GIT_COMMITTER_EMAIL: "release-bot@dataprof.dev"
      run: |
        echo "🚀 Forcing ${{ github.event.inputs.version_type }} release..."
        npx semantic-release --no-ci

name: Staging to Master - Simple Production Release

on:
  pull_request:
    branches: [master, main]
    types: [opened, synchronize, reopened]

# Prevent multiple production validation runs on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Validate this is from staging
  validate-staging-pr:
    name: Validate Staging PR
    runs-on: ubuntu-latest
    outputs:
      is-staging: ${{ steps.check.outputs.is-staging }}

    steps:
    - name: Check PR source
      id: check
      run: |
        if [[ "${{ github.head_ref }}" == "staging" ]]; then
          echo "‚úÖ Valid staging‚Üímaster PR"
          echo "is-staging=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Only staging‚Üímaster PRs allowed"
          echo "is-staging=false" >> $GITHUB_OUTPUT
          exit 1
        fi

  # Production-critical tests only - focused on release blockers
  production-tests:
    name: Production Critical Tests
    runs-on: ubuntu-latest
    needs: validate-staging-pr
    if: needs.validate-staging-pr.outputs.is-staging == 'true'
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable

    - name: Production-critical test suite
      run: |
        echo "üß™ Running production-critical tests..."

        # Critical: Core functionality tests
        cargo test --lib --quiet --features database

        # Critical: Security test suite (production blocker)
        echo "üîí Running security tests..."
        cargo test --test security_tests --features database --quiet

        # Critical: Error handling (production stability)
        if cargo test --test error_handling_simple --quiet 2>/dev/null; then
          echo "‚úÖ Error handling tests passed"
        else
          echo "‚ö†Ô∏è Error handling test file not found - skipping"
        fi

        # Critical: CLI functionality (user-facing)
        if cargo test --test cli_basic_tests --quiet 2>/dev/null; then
          echo "‚úÖ CLI tests passed"
        else
          echo "‚ö†Ô∏è CLI test file not found - skipping"
        fi

        echo "‚úÖ Production-critical tests passed"

    - name: Production database feature validation
      run: |
        echo "üóÑÔ∏è Validating database features for production..."

        # Test critical database connectors
        cargo test --features postgres --quiet --lib
        cargo test --features mysql --quiet --lib
        cargo test --features sqlite --quiet --lib

        echo "‚úÖ Database feature validation passed"

    - name: Production build validation
      run: |
        echo "üèóÔ∏è Building production release..."
        cargo build --release --quiet

        echo "‚úÖ Production build successful"

        # Verify CLI binary works
        ./target/release/dataprof-cli --help >/dev/null
        echo "‚úÖ CLI binary validation passed"

        echo "‚ÑπÔ∏è  Comprehensive testing handled by CI workflow"

  # Production security gate - relies on security-advanced.yml for comprehensive scanning
  security-gate:
    name: Production Security Gate
    runs-on: ubuntu-latest
    needs: validate-staging-pr
    if: needs.validate-staging-pr.outputs.is-staging == 'true'

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Essential production security validation
      run: |
        echo "üîê Running essential production security validation..."

        # Critical: Check for hardcoded secrets (production blocker)
        if grep -r -E "(password|secret|token|key)\s*=\s*\"[^\"]+\"" src/ --include="*.rs" 2>/dev/null; then
          echo "‚ùå CRITICAL: Hardcoded secrets found in production code"
          exit 1
        fi

        # Critical: Verify core security functions exist (production blocker)
        if ! grep -r -q "validate_sql_identifier" src/database/security/ 2>/dev/null; then
          echo "‚ùå CRITICAL: SQL injection protection missing"
          exit 1
        fi

        # Critical: Run security test suite (production blocker)
        if ! cargo test --test security_tests --features database --quiet; then
          echo "‚ùå CRITICAL: Security tests failed"
          exit 1
        fi

        echo "‚úÖ Essential production security validation passed"
        echo "‚ÑπÔ∏è  Comprehensive security scanning handled by security-advanced workflow"

  # Simple readiness gate
  production-ready:
    name: Production Ready
    runs-on: ubuntu-latest
    needs: [validate-staging-pr, production-tests, security-gate]
    if: always() && needs.validate-staging-pr.outputs.is-staging == 'true'

    steps:
    - name: Check readiness
      run: |
        echo "üìã Production Readiness Check"
        echo "Tests: ${{ needs.production-tests.result }}"
        echo "Security Gate: ${{ needs.security-gate.result }}"

        if [[ "${{ needs.production-tests.result }}" == "success" &&
              "${{ needs.security-gate.result }}" == "success" ]]; then
          echo "üéâ Ready for production!"
          echo "‚ÑπÔ∏è  Comprehensive security validation in security-advanced workflow"
        else
          echo "‚ùå Not ready for production"
          exit 1
        fi

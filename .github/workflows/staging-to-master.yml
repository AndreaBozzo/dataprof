name: Staging to Master - Simple Production Release

on:
  pull_request:
    branches: [master, main]
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  # Validate this is from staging
  validate-staging-pr:
    name: Validate Staging PR
    runs-on: ubuntu-latest
    outputs:
      is-staging: ${{ steps.check.outputs.is-staging }}

    steps:
    - name: Check PR source
      id: check
      run: |
        if [[ "${{ github.head_ref }}" == "staging" ]]; then
          echo "‚úÖ Valid staging‚Üímaster PR"
          echo "is-staging=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Only staging‚Üímaster PRs allowed"
          echo "is-staging=false" >> $GITHUB_OUTPUT
          exit 1
        fi

  # Essential production tests only
  production-tests:
    name: Production Tests
    runs-on: ubuntu-latest
    needs: validate-staging-pr
    if: needs.validate-staging-pr.outputs.is-staging == 'true'

    steps:
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable

    - name: Run all tests
      run: cargo test --verbose

    - name: Run integration tests
      run: cargo test --test "*" --verbose

    - name: Run error handling tests
      run: cargo test --test error_handling_simple --verbose

    - name: Run data quality tests
      run: cargo test --test data_quality_simple --verbose

    - name: Run CLI integration tests
      run: cargo test --test cli_basic_tests --verbose

    - name: Run security tests
      run: |
        echo "üîí Running security tests for production..."
        cargo test --test security_tests --features=database --verbose
        echo "‚úÖ Security tests passed"

    - name: Test with features
      run: |
        cargo test --features postgres --verbose
        cargo test --features mysql --verbose
        cargo test --features sqlite --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Verify CLI works
      run: ./target/release/dataprof-cli --help

  # Basic security check
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: validate-staging-pr
    if: needs.validate-staging-pr.outputs.is-staging == 'true'

    steps:
    - uses: actions/checkout@v5

    - name: Comprehensive security audit
      run: |
        # Install Rust for security checks
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env

        echo "üîç Running comprehensive security audit..."

        # Check for hardcoded secrets
        if grep -r -E "(password|secret|token|key)\s*=\s*\"[^\"]+\"" src/ --include="*.rs" 2>/dev/null; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found"
          exit 1
        fi

        # Verify SQL injection protection is in place
        echo "Checking SQL injection protection..."
        if ! grep -q "validate_sql_identifier" src/database/security.rs; then
          echo "‚ùå SQL injection protection missing"
          exit 1
        fi

        if ! grep -q "validate_base_query" src/database/security.rs; then
          echo "‚ùå Base query validation missing"
          exit 1
        fi

        if ! grep -q "sanitize_error_message" src/database/security.rs; then
          echo "‚ùå Error sanitization missing"
          exit 1
        fi

        # Verify security functions are used in all connectors
        CONNECTORS=("sqlite.rs" "postgres.rs" "mysql.rs" "duckdb.rs")
        for connector in "${CONNECTORS[@]}"; do
          if [ -f "src/database/connectors/$connector" ]; then
            if ! grep -q "validate_sql_identifier\|validate_base_query" "src/database/connectors/$connector"; then
              echo "‚ùå Security validation missing in $connector"
              exit 1
            fi
          fi
        done

        # Check for debug prints in production
        if grep -r -E "println!|dbg!" src/ --include="*.rs" | grep -v test | grep -v "//.*println!" 2>/dev/null; then
          echo "‚ö†Ô∏è Debug prints found in production code"
        fi

        # Run security tests
        cargo test --test security_tests --features=database

        # Check test coverage
        SECURITY_TESTS=$(grep -c "#\[test\]" tests/security_tests.rs || echo 0)
        echo "Security test count: $SECURITY_TESTS"
        if [ "$SECURITY_TESTS" -lt 15 ]; then
          echo "‚ùå Insufficient security test coverage"
          exit 1
        fi

        echo "‚úÖ Comprehensive security audit passed"

  # Simple readiness gate
  production-ready:
    name: Production Ready
    runs-on: ubuntu-latest
    needs: [validate-staging-pr, production-tests, security-check]
    if: always() && needs.validate-staging-pr.outputs.is-staging == 'true'

    steps:
    - name: Check readiness
      run: |
        echo "üìã Production Readiness Check"
        echo "Tests: ${{ needs.production-tests.result }}"
        echo "Security: ${{ needs.security-check.result }}"

        if [[ "${{ needs.production-tests.result }}" == "success" &&
              "${{ needs.security-check.result }}" == "success" ]]; then
          echo "üéâ Ready for production!"
        else
          echo "‚ùå Not ready for production"
          exit 1
        fi
